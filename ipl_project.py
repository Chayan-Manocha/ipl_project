# -*- coding: utf-8 -*-
"""Ipl_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Izn6yOVKwN6ZWUHHp1SNrbLjgzTK-UmS
"""

import pandas as pd
import numpy as np
import scipy as sc
from scipy import stats

df_deliveries = pd.read_csv('/content/deliveries.csv')
df_deliveries=df_deliveries[['batsman', 'total_runs',]]
df_deliveries

df_fours=df_deliveries.loc[df_deliveries['total_runs'] == 4]
n=10
df_top_fours_batsman=df_fours['batsman'].value_counts()[:n].index.tolist()
df_top_fours_batsman

df_sixes=df_deliveries.loc[df_deliveries['total_runs'] == 6]
n=10
df_top_sixes_batsman=df_sixes['batsman'].value_counts()[:n].index.tolist()
df_top_sixes_batsman

df_boundaries=df_deliveries[(df_deliveries.total_runs == 4) | (df_deliveries.total_runs == 6)]
n=10
df_top_boundaries_batsman=df_boundaries['batsman'].value_counts()[:n].index.tolist()
df_top_boundaries_batsman

df_out=list(zip(df_top_fours_batsman ,df_top_sixes_batsman ,df_top_boundaries_batsman))
df_out
df_final = pd.DataFrame(df_out, columns = ['Most Fours',  'Most Sixes', 'Most Boundaries'])
df_final

df_deliveries = pd.read_csv('/content/deliveries.csv')
df_bowler=df_deliveries[[ 'match_id', 'bowler', 'player_dismissed',]]
df_bowler
df_dismissals=df_bowler.dropna()
df_dismissals

df_dup = df_dismissals[df_dismissals.duplicated(['match_id','bowler'])]
df_dup

df_count_wickets=df_dup['bowler'].value_counts()
df_count_wickets

df_count_match_id=df_dup['match_id'].value_counts()
df_count_match_id

df_pranav=df_dismissals
df_use=df_pranav.drop(['player_dismissed'],axis=1)

df_end=df_use.groupby(df_use.columns.tolist(),as_index=False).size()
df_end

df_end.rename(columns = {'size':'wickets'}, inplace = True)
df_end

index_names = df_end[ (df_end['wickets'] <=2)].index
df_end.drop(index_names, inplace = True)
df_end

index_names = df_end[ (df_end['wickets'] <=2)].index
df_end.drop(index_names, inplace = True)
n=10
df_final=df_end['bowler'].value_counts()[:n].index.tolist()
df_final

df_strikerate = pd.read_csv('/content/deliveries.csv')
df_strikerate=df_strikerate[['batsman', 'batsman_runs',]]
df_strikerate

df_total=(df_strikerate.groupby(by=["batsman"])["batsman_runs"].sum())
df_total
df_total.head(10)

df_count=(df_strikerate.groupby(by=["batsman"])["batsman_runs"].count())
df_count
df_count.head(10)

df_finalstrikerate=list(zip(df_total ,df_count))
df_finalstrikerate
df_finalstrikerate = pd.DataFrame(df_finalstrikerate, columns = ['runs scored', 'balls played'])
df_finalstrikerate.sort_values(by=['runs scored' ,'balls played'], inplace=True, ascending=False)
df_finalstrikerate

df_finalstrikerate["result"] = df_finalstrikerate["runs scored"].div(df_finalstrikerate["balls played"].values)
df_finalstrikerate
df_finalstrikerate['result'] *= 100
df_finalstrikerate
df_finalstrikerate.sort_values(by=['result'], inplace=True, ascending=False)
df_finalstrikerate.head(10)

df_avg = pd.read_csv('/content/deliveries.csv')
df_avg=df_avg[['batsman', 'batsman_runs','match_id']]
df_avg

df_runsscored=(df_avg.groupby(by=["batsman"])["batsman_runs"].sum())
df_runsscored
df_runsscored.head(10)

df_avgf = df_avg[df_avg.duplicated(['match_id','batsman'])]
df_avgf

df_avgf.drop_duplicates(subset=['match_id' ,'batsman'])
df_avg_final=(df_eco.groupby(by=["batsman"])["match_id"].count())
df_avg_final

df_finalavg=list(zip(df_runsscored ,df_avg_final))
df_finalavg
df_finalavg = pd.DataFrame(df_finalavg, columns = ['runs scored', 'matches played'])
df_finalavg.sort_values(by=['runs scored' ,'matches played'], inplace=True, ascending=False)
df_finalavg

df_finalavg["result1"] = df_finalavg["runs scored"].div(df_finalavg["matches played"].values)
df_finalavg

df_finalavg.sort_values(by=['result1'], inplace=True, ascending=False)
df_finalavg
df_finalavg.head(10)

df_batstra = pd.concat([df_finalstrikerate ,df_finalavg ], axis=1, join='inner')
df_batstra

df_batstra['player stra'] = df_batstra['result'] + df_batstra['result1']
df_batstra
df_batstra.head(10)

df_batstra.sort_values(by=['player stra'], inplace=True, ascending=False)
df_batstra.head(10)

df_eco = pd.read_csv('/content/deliveries.csv')
df_economy=df_eco[['bowler', 'ball','bye_runs','legbye_runs','total_runs']]
df_economy

df_economy.drop_duplicates(subset=['ball' ,'bowler'])
df_finaleco=(df_economy.groupby(by=["bowler"])["ball"].count())
df_finaleco

df_economy.drop_duplicates(subset=['ball' ,'bowler'])
df_final_runs_by_bowler=(df_economy.groupby(by=["bowler"])["total_runs"].sum())
df_final_runs_by_bowler

df_economy.drop_duplicates(subset=['ball' ,'bowler'])
df_final_runs_by_bowler1=(df_economy.groupby(by=["bowler"])["bye_runs"].sum())
df_final_runs_by_bowler1

df_economy.drop_duplicates(subset=['ball' ,'bowler'])
df_final_runs_by_bowler2=(df_economy.groupby(by=["bowler"])["legbye_runs"].sum())
df_final_runs_by_bowler2

df_final_economy_rate=list(zip(df_finaleco,df_final_runs_by_bowler,df_final_runs_by_bowler1,df_final_runs_by_bowler2))
df_final_economy_rate
df_final_economy_rate = pd.DataFrame(df_final_economy_rate, columns = ['no_of_balls_delivered', 'total_runs_concided','total_bye_runs','total_legbye_runs'])
df_final_economy_rate

df_final_economy_rate['extra_runs'] = df_final_economy_rate['total_bye_runs'] + df_final_economy_rate['total_legbye_runs']
df_final_economy_rate

df_final_economy_rate['runs_concided_by_bowler'] = df_final_economy_rate['total_runs_concided'] - df_final_economy_rate['extra_runs']
df_final_economy_rate

df_final_economy_rate['no_of_balls_delivered'] = df_final_economy_rate['no_of_balls_delivered'].div(6).round(2)
df_final_economy_rate

df_final_economy_rate["economy_of_player"] = df_final_economy_rate["runs_concided_by_bowler"].div(df_final_economy_rate["no_of_balls_delivered"].values)
df_final_economy_rate

df_final_economy_rate.sort_values(by=['economy_of_player'], inplace=True, ascending=True)
df_final_economy_rate.head(10)

df_final_economy_rate.plot(x='economy_of_player', kind='bar', stacked=True,
        title='Stacked Bar Graph by dataframe')
plt.show()